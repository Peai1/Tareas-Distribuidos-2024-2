// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: protofiles/logistica.proto

package protofiles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClientService_SendPackage_FullMethodName      = "/protofiles.ClientService/SendPackage"
	ClientService_GetPackageStatus_FullMethodName = "/protofiles.ClientService/GetPackageStatus"
	ClientService_TerminarConexion_FullMethodName = "/protofiles.ClientService/TerminarConexion"
)

// ClientServiceClient is the client API for ClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio para manejar la interacción de los clientes con el sistema logístico
type ClientServiceClient interface {
	SendPackage(ctx context.Context, in *PackageRequest, opts ...grpc.CallOption) (*PackageResponse, error)
	GetPackageStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	TerminarConexion(ctx context.Context, in *TerminarConexionMensaje, opts ...grpc.CallOption) (*TerminarConexionMensaje, error)
}

type clientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientServiceClient(cc grpc.ClientConnInterface) ClientServiceClient {
	return &clientServiceClient{cc}
}

func (c *clientServiceClient) SendPackage(ctx context.Context, in *PackageRequest, opts ...grpc.CallOption) (*PackageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PackageResponse)
	err := c.cc.Invoke(ctx, ClientService_SendPackage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) GetPackageStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, ClientService_GetPackageStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) TerminarConexion(ctx context.Context, in *TerminarConexionMensaje, opts ...grpc.CallOption) (*TerminarConexionMensaje, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TerminarConexionMensaje)
	err := c.cc.Invoke(ctx, ClientService_TerminarConexion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServiceServer is the server API for ClientService service.
// All implementations must embed UnimplementedClientServiceServer
// for forward compatibility.
//
// Servicio para manejar la interacción de los clientes con el sistema logístico
type ClientServiceServer interface {
	SendPackage(context.Context, *PackageRequest) (*PackageResponse, error)
	GetPackageStatus(context.Context, *StatusRequest) (*StatusResponse, error)
	TerminarConexion(context.Context, *TerminarConexionMensaje) (*TerminarConexionMensaje, error)
	mustEmbedUnimplementedClientServiceServer()
}

// UnimplementedClientServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClientServiceServer struct{}

func (UnimplementedClientServiceServer) SendPackage(context.Context, *PackageRequest) (*PackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPackage not implemented")
}
func (UnimplementedClientServiceServer) GetPackageStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackageStatus not implemented")
}
func (UnimplementedClientServiceServer) TerminarConexion(context.Context, *TerminarConexionMensaje) (*TerminarConexionMensaje, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminarConexion not implemented")
}
func (UnimplementedClientServiceServer) mustEmbedUnimplementedClientServiceServer() {}
func (UnimplementedClientServiceServer) testEmbeddedByValue()                       {}

// UnsafeClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServiceServer will
// result in compilation errors.
type UnsafeClientServiceServer interface {
	mustEmbedUnimplementedClientServiceServer()
}

func RegisterClientServiceServer(s grpc.ServiceRegistrar, srv ClientServiceServer) {
	// If the following call pancis, it indicates UnimplementedClientServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClientService_ServiceDesc, srv)
}

func _ClientService_SendPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).SendPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_SendPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).SendPackage(ctx, req.(*PackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_GetPackageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).GetPackageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_GetPackageStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).GetPackageStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_TerminarConexion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminarConexionMensaje)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).TerminarConexion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_TerminarConexion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).TerminarConexion(ctx, req.(*TerminarConexionMensaje))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientService_ServiceDesc is the grpc.ServiceDesc for ClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protofiles.ClientService",
	HandlerType: (*ClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPackage",
			Handler:    _ClientService_SendPackage_Handler,
		},
		{
			MethodName: "GetPackageStatus",
			Handler:    _ClientService_GetPackageStatus_Handler,
		},
		{
			MethodName: "TerminarConexion",
			Handler:    _ClientService_TerminarConexion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/logistica.proto",
}

const (
	CaravanService_UpdateDelivery_FullMethodName           = "/protofiles.CaravanService/UpdateDelivery"
	CaravanService_SendDeliveryInstructions_FullMethodName = "/protofiles.CaravanService/SendDeliveryInstructions"
)

// CaravanServiceClient is the client API for CaravanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio para manejar la interacción de las caravanas con el sistema logístico
type CaravanServiceClient interface {
	UpdateDelivery(ctx context.Context, in *DeliveryUpdateRequest, opts ...grpc.CallOption) (*DeliveryUpdateResponse, error)
	SendDeliveryInstructions(ctx context.Context, in *DeliveryInstructionRequest, opts ...grpc.CallOption) (*DeliveryInstructionResponse, error)
}

type caravanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCaravanServiceClient(cc grpc.ClientConnInterface) CaravanServiceClient {
	return &caravanServiceClient{cc}
}

func (c *caravanServiceClient) UpdateDelivery(ctx context.Context, in *DeliveryUpdateRequest, opts ...grpc.CallOption) (*DeliveryUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeliveryUpdateResponse)
	err := c.cc.Invoke(ctx, CaravanService_UpdateDelivery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caravanServiceClient) SendDeliveryInstructions(ctx context.Context, in *DeliveryInstructionRequest, opts ...grpc.CallOption) (*DeliveryInstructionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeliveryInstructionResponse)
	err := c.cc.Invoke(ctx, CaravanService_SendDeliveryInstructions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaravanServiceServer is the server API for CaravanService service.
// All implementations must embed UnimplementedCaravanServiceServer
// for forward compatibility.
//
// Servicio para manejar la interacción de las caravanas con el sistema logístico
type CaravanServiceServer interface {
	UpdateDelivery(context.Context, *DeliveryUpdateRequest) (*DeliveryUpdateResponse, error)
	SendDeliveryInstructions(context.Context, *DeliveryInstructionRequest) (*DeliveryInstructionResponse, error)
	mustEmbedUnimplementedCaravanServiceServer()
}

// UnimplementedCaravanServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCaravanServiceServer struct{}

func (UnimplementedCaravanServiceServer) UpdateDelivery(context.Context, *DeliveryUpdateRequest) (*DeliveryUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDelivery not implemented")
}
func (UnimplementedCaravanServiceServer) SendDeliveryInstructions(context.Context, *DeliveryInstructionRequest) (*DeliveryInstructionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDeliveryInstructions not implemented")
}
func (UnimplementedCaravanServiceServer) mustEmbedUnimplementedCaravanServiceServer() {}
func (UnimplementedCaravanServiceServer) testEmbeddedByValue()                        {}

// UnsafeCaravanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaravanServiceServer will
// result in compilation errors.
type UnsafeCaravanServiceServer interface {
	mustEmbedUnimplementedCaravanServiceServer()
}

func RegisterCaravanServiceServer(s grpc.ServiceRegistrar, srv CaravanServiceServer) {
	// If the following call pancis, it indicates UnimplementedCaravanServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CaravanService_ServiceDesc, srv)
}

func _CaravanService_UpdateDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaravanServiceServer).UpdateDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaravanService_UpdateDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaravanServiceServer).UpdateDelivery(ctx, req.(*DeliveryUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaravanService_SendDeliveryInstructions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryInstructionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaravanServiceServer).SendDeliveryInstructions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaravanService_SendDeliveryInstructions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaravanServiceServer).SendDeliveryInstructions(ctx, req.(*DeliveryInstructionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CaravanService_ServiceDesc is the grpc.ServiceDesc for CaravanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CaravanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protofiles.CaravanService",
	HandlerType: (*CaravanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateDelivery",
			Handler:    _CaravanService_UpdateDelivery_Handler,
		},
		{
			MethodName: "SendDeliveryInstructions",
			Handler:    _CaravanService_SendDeliveryInstructions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/logistica.proto",
}
